[
    readme="Небольшая библиотека для получения данных из файлов пакета MS Office, недоступных для штатных средств языка M. Как обычно всё открыто и бесплатно - пользуйтесь! @buchlotnik",

    fxUnzip=[func=(ZIP, optional options)=>
    [
    encod = [a=options[Encoding]?,b=if a = null then 866 else a][b],
    compr = (x)=> if x =0 then Compression.None else Compression.Deflate,

    u16 =BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger16,ByteOrder.LittleEndian),
    u32 =BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32,ByteOrder.LittleEndian),

    get=(x)=>BinaryFormat.Record(
        if Binary.Range(x,0,4)=#binary({0x50,0x4b,0x03,0x04})
        then [  Name=BinaryFormat.Text(u16(Binary.Range(x,26,2)),encod),
                Extr=BinaryFormat.Binary(u16(Binary.Range(x,28,2))),
                Value=BinaryFormat.Transform(BinaryFormat.Binary(u32(Binary.Range(x,18,4))),(y)=>Binary.Decompress(y,compr(u16(Binary.Range(x,8,2)))))]
        else []
    ),

    lst = BinaryFormat.List(BinaryFormat.Choice(BinaryFormat.Binary(30),get),(x)=>x<>[])(ZIP),
    to = Table.FromRecords(List.RemoveLastN(lst,1),type table [Name=text,Value=binary])][to],

typ =type function (ZIP as (type binary meta [Documentation.FieldCaption="бинароное содержимое (zip, xlsx, docx, pptx и т.д.)"]), optional options as record) as table meta 
            [Documentation.Name = "fxUnzip (@buchlotnik)",
            Documentation.LongDescription ="функция считывает содержимое архива и возвращает таблицу с полями:<p> <b>Name</b> - имя файла (с путём к файлу) <p><b>Value</b> - бинароное содержимое файла. <p>Необязательный аргумент <b>options</b> на текущий момент поддерживает следующие поля: <p>1) <b>Encoding</b> - требуется для корректного чтения не латинских имён файлов (по умоланию <b>866 - кириллица</b>)"],

result = Value.ReplaceType(func,typ)][result],

    fxExcelGetRowsAttributes=(file,optional options as record)=>
    [
        f=(x)=>[
        xml=List.Buffer(Xml.Document(x{0}){0}[Value]{[Name="sheetData"]}[Value][Attributes]),
        nms=List.Transform(xml,(x)=>x{[Name="r"]}?[Value]?),
        dict=Record.FromList(List.Transform(xml,Record.FromTable),nms),
        add = Table.AddIndexColumn(x{1}, "Attributes", Number.From(nms{0}),1),
        tr=Table.TransformColumns(add,{"Attributes",(x)=>Record.FieldOrDefault(dict,Text.From(x))}),
        to = Table.ReorderColumns(tr,{"Attributes"}&Table.ColumnNames(x{1}))][to],
    
        from=Binary.Buffer(file),
        xml=List.Buffer(Table.SelectRows(fxUnzip(from),(r)=>Text.StartsWith(r[Name],"xl/worksheets/sheet"))[Value]),
        xl = Table.SelectRows(Excel.Workbook(from,false),(r)=>r[Kind]="Sheet"),
        add = Table.AddIndexColumn(xl,"xml"),
        tr = Table.TransformColumns(add,{"xml",(x)=>xml{x}}),
        to = Table.CombineColumns(tr,{"xml","Data"},f,"Data")
    ][to]
]
