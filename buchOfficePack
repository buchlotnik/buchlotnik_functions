[
    readme="Небольшая библиотека для получения данных из файлов пакета MS Office, недоступных для штатных средств языка M. Как обычно всё открыто и бесплатно - пользуйтесь! @buchlotnik",

    fxUnzip=[func=(ZIP, optional options)=>
    [
    encod = [a=options[Encoding]?,b=if a = null then 866 else a][b],
    compr = (x)=> if x =0 then Compression.None else Compression.Deflate,

    u16 =BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger16,ByteOrder.LittleEndian),
    u32 =BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32,ByteOrder.LittleEndian),

    get=(x)=>BinaryFormat.Record(
        if Binary.Range(x,0,4)=#binary({0x50,0x4b,0x03,0x04})
        then [  Name=BinaryFormat.Text(u16(Binary.Range(x,26,2)),encod),
                Extr=BinaryFormat.Binary(u16(Binary.Range(x,28,2))),
                Value=BinaryFormat.Transform(BinaryFormat.Binary(u32(Binary.Range(x,18,4))),(y)=>Binary.Decompress(y,compr(u16(Binary.Range(x,8,2)))))]
        else []
    ),

    lst = BinaryFormat.List(BinaryFormat.Choice(BinaryFormat.Binary(30),get),(x)=>x<>[])(ZIP),
    to = Table.FromRecords(List.RemoveLastN(lst,1),type table [Name=text,Value=binary])][to],

typ =type function (ZIP as (type binary meta [Documentation.FieldCaption="ZIP - бинароное содержимое (zip, xlsx, docx, pptx и т.д.)"]), optional options as record) as table meta 
            [Documentation.Name = "fxUnzip (@buchlotnik)",
            Documentation.LongDescription ="функция считывает содержимое архива и возвращает таблицу с полями:<p> <b>Name</b> - имя файла (с путём к файлу) <p><b>Value</b> - бинарное содержимое файла. <p>Необязательный аргумент <b>options</b> на текущий момент поддерживает следующие поля: <p>1) <b>Encoding</b> - требуется для корректного чтения не латинских имён файлов (по умолчанию <b>866 - кириллица</b>)"],

result = Value.ReplaceType(func,typ)][result],

    fxUnzip2016=[ func = (ZIP, optional cp)=>
        [   ui16 = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger16, ByteOrder.LittleEndian),
            ui32 = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32, ByteOrder.LittleEndian),
            b = (x) => BinaryFormat.Binary(x),
            c = if cp is null then 866 else cp,
            f = (x) => try Binary.Decompress(x, Compression.Deflate) otherwise null,
            g = (x) => BinaryFormat.Transform(b(x),f),
            h = (x) => [head = BinaryFormat.Record([a = b(14), size=ui32, c=b(4), name=ui16, extra=ui16])(x),
                        body = BinaryFormat.Record( [ Name = BinaryFormat.Text(head[name],c),
                                                  Extras   = b(head[extra]),
                                                  Value  = g(head[size]),
                                                  flag  = true])][body],
            iftrue = BinaryFormat.Choice(b(26),h),
            iffalse = BinaryFormat.Record([flag = false]),
            getfile = BinaryFormat.Choice(ui32, (x)=> if x = 67324752 then iftrue else iffalse, type binary),
            filelist = BinaryFormat.List(getfile, each [flag] = true)(ZIP),
            remove = List.RemoveLastN(filelist,1),
            to = Table.FromRecords(remove, type table [Name = text, Value = binary])][to],
    typ = type function (
                ZIP as (type binary meta [Documentation.FieldCaption = "бинарное содержимое (zip,xlsx,docx,pptx и т.п.)"]),
                optional cp as (type number meta [Documentation.FieldCaption = "кодировка", Documentation.SampleValues = {866}])
                         )           
                as table meta [ 
                                Documentation.Name = "UnZip (@buchlotnik)",
                                Documentation.LongDescription = "Функция считывает содержимое zip-архива и возвращает таблицу с полями FileName - имя файла (с путём, если он в подпапке) и Content - бинарное содержимое конкретного файла. Кодировка требуется для корректного распознавания <b>не латинских</b> имён файлов (для офисных документов указывать необязательно), по умолчанию 866 - кодировка DOS <b>с поддержкой кириллицы</b>"        
                                ],
    result = Value.ReplaceType(func,typ)][result],

    fxExcelGetRowsAttributes=(file,optional options as record)=>
    [
        f=(x)=>[
        xml=List.Buffer(Xml.Document(x{0}){0}[Value]{[Name="sheetData"]}[Value][Attributes]),
        nms=List.Transform(xml,(x)=>x{[Name="r"]}?[Value]?),
        dict=Record.FromList(List.Transform(xml,Record.FromTable),nms),
        add = Table.AddIndexColumn(x{1}, "Attributes", Number.From(nms{0}),1),
        tr=Table.TransformColumns(add,{"Attributes",(x)=>Record.FieldOrDefault(dict,Text.From(x))}),
        to = Table.ReorderColumns(tr,{"Attributes"}&Table.ColumnNames(x{1}))][to],
    
        from=Binary.Buffer(file),
        xml=List.Buffer(Table.SelectRows(fxUnzip(from),(r)=>Text.StartsWith(r[Name],"xl/worksheets/sheet"))[Value]),
        xl = Table.SelectRows(Excel.Workbook(from,false),(r)=>r[Kind]="Sheet"),
        add = Table.AddIndexColumn(xl,"xml"),
        tr = Table.TransformColumns(add,{"xml",(x)=>xml{x}}),
        to = Table.CombineColumns(tr,{"xml","Data"},f,"Data")
    ][to]
]
