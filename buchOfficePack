[
    readme="Небольшая библиотека для получения данных из файлов пакета MS Office, недоступных для штатных средств языка M. Как обычно всё открыто и бесплатно - пользуйтесь! @buchlotnik",

    fxUnzip=[func=(ZIP, optional options)=>
    [
    encod = [a=options[Encoding]?,b=if a = null then 866 else a][b],
    compr = (x)=> if x =0 then Compression.None else Compression.Deflate,

    u16 =BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger16,ByteOrder.LittleEndian),
    u32 =BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32,ByteOrder.LittleEndian),

    get=(x)=>BinaryFormat.Record(
        if Binary.Range(x,0,4)=#binary({0x50,0x4b,0x03,0x04})
        then [  Name=BinaryFormat.Text(u16(Binary.Range(x,26,2)),encod),
                Extr=BinaryFormat.Binary(u16(Binary.Range(x,28,2))),
                Value=BinaryFormat.Transform(BinaryFormat.Binary(u32(Binary.Range(x,18,4))),(y)=>Binary.Decompress(y,compr(u16(Binary.Range(x,8,2)))))]
        else []
    ),

    lst = BinaryFormat.List(BinaryFormat.Choice(BinaryFormat.Binary(30),get),(x)=>x<>[])(ZIP),
    to = Table.FromRecords(List.RemoveLastN(lst,1),type table [Name=text,Value=binary])][to],

typ =type function (ZIP as (type binary meta [Documentation.FieldCaption="ZIP - бинарное содержимое (zip, xlsx, docx, pptx и т.д.)"]), optional options as record) as table meta 
            [Documentation.Name = "fxUnzip (@buchlotnik)",
            Documentation.LongDescription ="функция считывает содержимое архива и возвращает таблицу с полями:<p> <b>Name</b> - имя файла (с путём к файлу) <p><b>Value</b> - бинарное содержимое файла. <p>Необязательный аргумент <b>options</b> на текущий момент поддерживает следующие поля: <p>1) <b>Encoding</b> - требуется для корректного чтения не латинских имён файлов (по умолчанию <b>866 - кириллица</b>)"],

result = Value.ReplaceType(func,typ)][result],

    fxUnzip2016=[ func = (ZIP, optional cp)=>
        [   ui16 = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger16, ByteOrder.LittleEndian),
            ui32 = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32, ByteOrder.LittleEndian),
            b = (x) => BinaryFormat.Binary(x),
            c = if cp is null then 866 else cp,
            f = (x) => try Binary.Decompress(x, Compression.Deflate) otherwise null,
            g = (x) => BinaryFormat.Transform(b(x),f),
            h = (x) => [head = BinaryFormat.Record([a = b(14), size=ui32, c=b(4), name=ui16, extra=ui16])(x),
                        body = BinaryFormat.Record( [ Name = BinaryFormat.Text(head[name],c),
                                                  Extras   = b(head[extra]),
                                                  Value  = g(head[size]),
                                                  flag  = true])][body],
            iftrue = BinaryFormat.Choice(b(26),h),
            iffalse = BinaryFormat.Record([flag = false]),
            getfile = BinaryFormat.Choice(ui32, (x)=> if x = 67324752 then iftrue else iffalse, type binary),
            filelist = BinaryFormat.List(getfile, each [flag] = true)(ZIP),
            remove = List.RemoveLastN(filelist,1),
            to = Table.FromRecords(remove, type table [Name = text, Value = binary])][to],
    typ = type function (
                ZIP as (type binary meta [Documentation.FieldCaption = "бинарное содержимое (zip,xlsx,docx,pptx и т.п.)"]),
                optional cp as (type number meta [Documentation.FieldCaption = "кодировка", Documentation.SampleValues = {866}])
                         )           
                as table meta [ 
                                Documentation.Name = "UnZip (@buchlotnik)",
                                Documentation.LongDescription = "Функция считывает содержимое zip-архива и возвращает таблицу с полями FileName - имя файла (с путём, если он в подпапке) и Content - бинарное содержимое конкретного файла. Кодировка требуется для корректного распознавания <b>не латинских</b> имён файлов (для офисных документов указывать необязательно), по умолчанию 866 - кодировка DOS <b>с поддержкой кириллицы</b>"        
                                ],
    result = Value.ReplaceType(func,typ)][result],

    fxExcelGetRowsAttributes= [func=(filebin,optional options)=>

   [sheetsonly = if options[SheetsOnly]?=true then true else false,
   fxUnzip = if options[Excel2016]?=true then fxUnzip2016 else fxUnzip,
      
      bin = Binary.Buffer(filebin),
    xml = List.Buffer(Table.SelectRows(fxUnzip(bin),(r)=>Text.StartsWith(r[Name],"xl/worksheets/sheet"))[Value]),
    wb = Table.Group(Excel.Workbook(bin,false),"Kind",{"tmp",(x)=>x}),
    xl = wb{[Kind="Sheet"]}[tmp],
    add = Table.AddIndexColumn(xl,"xml"),
    tr = Table.TransformColumns(add,{"xml",(x)=>xml{x}}),
    cmb = Table.CombineColumns(tr,{"xml","Data"},fxExcelSheetAddXmlInformation,"Data"),
    def=[a=wb{[Kind="DefinedName"]}?[tmp]?,b=if a = null then #table({},{}) else a][b],
    to = if sheetsonly then cmb else cmb & def][to],
    typ=type function(filebin as binary, optional options as record) as table meta 
    [Documentation.Name="fxExcelGetRowsAttributes (@buchlotnik)",
    Documentation.LongDescription="функция повторят действия функции Excel.Workbook, но к таблице каждого листа добавляет информацию об атрибутах строк"],
    result = Value.ReplaceType(func,typ)][result],

fxExcelSheetAddXmlInformation=[func=(x,optional options)=>
            [xml = Xml.Document(x{0}){0}[Value]{[Name="sheetData"]}[Value][Attributes],
            xml1 = Xml.Document(x{0}){0}[Value]{[Name="sheetData"]}[Value][Value],
            tr =if options[Cells]?=true then  List.Transform(xml1,(x)=>[a=x{0}?[Attributes]?,b=if a=null then [] else Record.FromTable(a)][b]) else List.Transform(xml,Record.FromTable),
            nms = List.Transform(xml,(x)=>x{[Name="r"]}?[Value]?),
            dict = Record.FromList(tr,nms),
            add=Table.AddIndexColumn(x{1},"Attributes",Number.From(nms{0})),
            tr1 = Table.TransformColumns(add,{"Attributes",(x)=>Record.FieldOrDefault(dict,Text.From(x))}),
            to = Table.ReorderColumns(tr1,{"Attributes"}&Table.ColumnNames(x{1}))][to],
    typ=type function(x as list,optional options as record) as table 
    meta [Documentation.Name="fxExcelSheetAddXmlInformation (@buchlotnik)",
        Documentation.LongDescription="вспомогательная функция, добавляющая к таблице листа дополнительную информацию из xml-разметки"],
    result=Value.ReplaceType(func,typ)][result],

fxTableRemoveEmptyColumns=[func =(table, optional options)=>
    [tbl = Table.Buffer(Table.Profile(table)),
    lst = Table.SelectRows(tbl,(r)=>r[Count]=r[NullCount])[Column],
    to = Table.RemoveColumns(table,lst)][to],
typ=type function (table as table, optional options as record) as table meta 
[Documentation.Name="fxTableRemoveEmptyColumns (@buchlotnik)",
Documentation.LongDescription="функция, удаляющая пустые столбцы из таблицы"],
result = Value.ReplaceType(func,typ)
][result],
fxGetMCode=(file)=>
    [u32 = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32,ByteOrder.LittleEndian),
    f=(x)=>[a=Text.Split(x," = "),b={Text.Trim(Text.Replace(a{0},"shared","")),Text.Combine(List.Skip(a)," = ")}][b],
    from = fxUnzip(file){[Name="customXml/item1.xml"]}?[Value]?,
    bin = Binary.FromText(Xml.Document(from){0}[Value],BinaryEncoding.Base64),
    data = BinaryFormat.Choice(BinaryFormat.Binary(8),(x)=>BinaryFormat.Binary(u32(Binary.Range(x,4,4))))(bin),
    unz = fxUnzip(data){[Name="Formulas/Section1.m"]}[Value],
    txt = Text.FromBinary(unz)&"#(cr,lf)",
    splt = Text.Split(txt,";#(cr,lf)"),
    lst = List.Range(splt,1,List.Count(splt)-2),
    tbl = Table.FromList(lst,f,{"Name","Value"}),
    to = if from=null then #table({"Name","Value"},{{null,null}}) else tbl][to],
fxParseHead= [func=(table,num,optional delim,optional fill)=>
   [
    lst = List.Buffer(Table.ToColumns(Table.TransformColumns(Table.Range(table,0,num),{},Text.From))), 
    delim = if delim=null then " " else delim,
    f=(x,y)=>List.Accumulate(   List.Zip({x,y}),
                                [i=false,j={}],
                                (s,c)=>[i=s[i]=true or c{0}<>null,j=if i then s[j]&{c{0}} else s[j]&{if c{0}=null then c{1} else c{0}}]
                            )[j],
    g=(x)=>if fill=null then Text.Combine(x,delim) else Text.Combine(List.ReplaceValue(x,null,fill,Replacer.ReplaceValue),delim), 
    gen = List.Generate(    ()=>[i=0,l=lst{i},o=l],
                            (x)=>x[i]<List.Count(lst),
                            (x)=>[i=x[i]+1,l=lst{i},o=f(l,x[o])],
                            (x)=>g(x[o])
                        ),
    out = Table.RenameColumns(Table.Range(table,num),List.Zip({Table.ColumnNames(table),gen}))
    ][out],
    typ = type function (
                table as (type table meta [Documentation.FieldCaption = "исходная таблица"]),
                num as (type number meta [Documentation.FieldCaption = "число строк для анализа шапки"]),
                optional delim as (type text meta [Documentation.FieldCaption = "(необязательно) разделитель для названий столбцов разных уровней"]),
                optional fill as (type text meta [Documentation.FieldCaption = "(необязательно) строковое значение, подставляемое вместо отсутствующего заголовка"])
                         )           
                as table meta [
                    Documentation.Name = "ParsHead", 
                    Documentation.Description = "функция анализирует первые несколько строк таблицы <i><b>table</b></i>, указанных в параметре  <i><b>num</b></i>, осуществляет заполнение ячеек (по принципу ""fillrigth"") при условии, что ячейки в текущем столбце выше пусты, далее по столбцам идёт объединение текста с использованием в качестве разделителя параметра  <i><b>delim</b></i>. Опционально четвертый параметр <i><b>fill</b></i> позволяет задать строковое значение, которое будет использовано для заголовков нижних уровней в случае их отсутствия в данном столбце "
                    ],
    res=Value.ReplaceType(func,typ)][res],

fxExcelGetCellAttributes=[func=(filebin,optional options)=>

   [bin = Binary.Buffer(filebin),
   unbin=fxUnzip(bin),
   xml = List.Buffer(Table.SelectRows(unbin,(r)=>Text.StartsWith(r[Name],"xl/worksheets/sheet"))[Value]),
style = List.Buffer(List.Transform(Xml.Document(unbin{[Name="xl/styles.xml"]}[Value]){0}[Value]{[Name="cellXfs"]}[Value][Attributes],Record.FromTable)),
alignment= List.Buffer(List.Transform(Xml.Document(unbin{[Name="xl/styles.xml"]}[Value]){0}[Value]{[Name="cellXfs"]}[Value][Value],(x)=>x{[Name="alignment"]}?[Attributes]?{[Name="indent"]}?[Value]?)),
    wb = Table.Group(Excel.Workbook(bin,false),"Kind",{"tmp",(x)=>x}),
    xl = wb{[Kind="Sheet"]}[tmp],
    add = Table.AddIndexColumn(xl,"xml"),
    tr = Table.TransformColumns(add,{"xml",(x)=>xml{x}}),
    cmb = Table.CombineColumns(tr,{"xml","Data"},(x)=>fxExcelSheetAddXmlInformation(x,[Cells=true]),"Data"),
styledetails=(x)=>Table.TransformColumns(x,{"Attributes",(y)=>[a=y[s]?,b=if a=null then [] else style{Number.From(a)}][b]}),
alignmentdetails=(x)=>Table.TransformColumns(x,{"Attributes",(y)=>[a=y[s]?,b=if a=null then [] else alignment {Number.From(a)}][b]}),
    rep= if options[StyleDetails]?=true then Table.TransformColumns(cmb,{"Data",styledetails}) else if options[Indent]?=true then Table.TransformColumns(cmb,{"Data", alignmentdetails }) else cmb,
    def=[a=wb{[Kind="DefinedName"]}?[tmp]?,b=if a = null then #table({},{}) else a][b],
    to = if options[SheetsOnly]?=true then rep else rep & def][to]
,
    typ=type function(filebin as binary, optional options as record) as table meta 
    [Documentation.Name="fxExcelGetCellAttributes (@buchlotnik)",
    Documentation.LongDescription="функция повторят действия функции Excel.Workbook, но к таблице каждого листа добавляет информацию об атрибутах ячейки первого столбца каждой из строк"],
    result = Value.ReplaceType(func,typ)][result],
fxTableSetColumnTypes=[func=(tbl as table,optional options as record) as table=>
[
    n=if options[rows]?=null then 100 else options[rows],
    cul=if options[culture]?=null then "ru" else options[culture],
    tr = if options[transform]?=null then true else options[transform],
    f_val = if options[deep]?=true then g else Value.Type,
    f_tr = if tr then (x)=>f_val(Value.FromText(x,cul)) else f_val,
    f_lst = (x)=>Type.Union(List.Transform(x,f_tr)),
    
    g=(x)=>if x is number then if Number.Mod(x,1)=0 then Int64.Type else Number.Type
            else if x is datetime then 
                if Date.Year(x)=1899 then Time.Type meta [f=true] 
                else if Time.From(x)=#time(0,0,0) then Date.Type meta [f=true] 
                else DateTime.Type
            else Value.Type(x),    
    
    set = List.Buffer(List.Transform(List.Zip(List.FirstN(Table.ToList(tbl,(x)=>x),n)),f_lst)),
    nms = List.Buffer(Table.ColumnNames(tbl)),
    zip = List.Zip({nms,set}),
    trlst=if tr then zip else List.Select(zip,(x)=>Value.Metadata(x{1})[f]?=true),
    typ = type table Type.ForRecord(Record.FromList(List.Transform(set,(x)=>[Type=x,Optional=false]),nms),false),
    to = Value.ReplaceType(Table.TransformColumnTypes(tbl,trlst,cul),typ)][to],

metadata=[Documentation.Name="fxTableSetColumnTypes",
            Documentation.LongDescription="функция, типизирующая столбцы таблицы на основании их значений. <p> Обязательный аргумент - <b>таблица</b> <p> Необязательный аргумент - <b>запись</b> с допустимыми полями:<p> <b>culture</b> - локаль, которую следует использовать при преобразовании типов столбцов <p> <b>rows</b> - количество строк, по которым определяется тип (по умолчанию 100), <p> <b>transform</b> - показывает, нужно ли преобразовывать значения в столбцах или констатировать текущие, по умолчанию <i> true </i>  <p> <b> deep</b> - глубокая оценка,  по умолчанию <i>false</i> (если <i>true</i> - анализирует числа на наличие целых, анализирует датывремена на наличие просто даты или просто времени)"],
to = Value.ReplaceType(func,Value.Type(func) meta metadata)][to]

]
